services:
  configuration:
    environment:
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
    build:
      context: "../configuration"
      dockerfile: Dockerfile
    healthcheck:
      test: "curl --fail --silent localhost:${CONFIGURATION_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s

  register:
    environment:
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
    build:
      context: "../register"
      dockerfile: Dockerfile
    healthcheck:
      test: "curl --fail --silent localhost:${REGISTER_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "${REGISTER_PORT}:${REGISTER_PORT}"
    depends_on:
      configuration:
        condition: service_healthy

  gateway:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
      GATEWAY_PORT: ${GATEWAY_PORT}
    build:
      context: "../gateway"
      dockerfile: "Dockerfile"
    healthcheck:
      test: "curl --fail --silent localhost:${GATEWAY_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      register:
        condition: service_healthy

  database:
    image: postgres:15-alpine
    hostname: database
    environment:
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_PASSWORD=${PSQL_PASS}
      - POSTGRES_DB=${PSQL_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 5s
      retries: 10

  orders:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
    build:
      context: "../microservices/orders"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      database:
        condition: service_healthy

  payments:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
    build:
      context: "../microservices/payments"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      database:
        condition: service_healthy

  tickets:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
    build:
      context: "../microservices/tickets"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      database:
        condition: service_healthy
