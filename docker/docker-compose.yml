services:
  configuration:
    environment:
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
    build:
      context: "../configuration"
      dockerfile: Dockerfile
    healthcheck:
      test: "curl --fail --silent localhost:${CONFIGURATION_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s

  register:
    environment:
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
    build:
      context: "../register"
      dockerfile: Dockerfile
    healthcheck:
      test: "curl --fail --silent localhost:${REGISTER_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "${REGISTER_PORT}:${REGISTER_PORT}"
    depends_on:
      configuration:
        condition: service_healthy

  gateway:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
      GATEWAY_PORT: ${GATEWAY_PORT}
    build:
      context: "../gateway"
      dockerfile: "Dockerfile"
    healthcheck:
      test: "curl --fail --silent localhost:${GATEWAY_PORT}/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      register:
        condition: service_healthy

  db-orders:
    image: postgres:15-alpine
    user: "${PSQL_USER}"
    environment:
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_PASSWORD=${PSQL_PASS}
      - POSTGRES_DB=${PSQL_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 5s
      retries: 10

  db-tickets:
    image: postgres:15-alpine
    user: "${PSQL_USER}"
    environment:
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_PASSWORD=${PSQL_PASS}
      - POSTGRES_DB=${PSQL_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 5s
      retries: 10

  db-payments:
    image: postgres:15-alpine
    user: "${PSQL_USER}"
    environment:
      - POSTGRES_USER=${PSQL_USER}
      - POSTGRES_PASSWORD=${PSQL_PASS}
      - POSTGRES_DB=${PSQL_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_PORT}
    healthcheck:
      test: nc -z localhost ${ZOOKEEPER_PORT} || exit -1
      interval: 20s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:${KAFKA_PORT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPIC_ENABLE=true
      - KAFKA_REST_LOG4J_ROOT_LOGLEVEL=WARN
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: nc -z localhost ${KAFKA_PORT} || exit -1
      interval: 20s
      timeout: 5s
      retries: 10

  orders:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
    build:
      context: "../microservices/orders"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      db-orders:
        condition: service_healthy
      kafka:
        condition: service_healthy

  payments:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
    build:
      context: "../microservices/payments"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      db-payments:
        condition: service_healthy
      kafka:
        condition: service_healthy

  tickets:
    environment:
      CONFIGURATION_HOST: configuration
      CONFIGURATION_PORT: ${CONFIGURATION_PORT}
      REGISTER_HOST: register
      REGISTER_PORT: ${REGISTER_PORT}
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_PORT}
    build:
      context: "../microservices/tickets"
      dockerfile: "Dockerfile"
    depends_on:
      gateway:
        condition: service_healthy
      db-tickets:
        condition: service_healthy
      kafka:
        condition: service_healthy
